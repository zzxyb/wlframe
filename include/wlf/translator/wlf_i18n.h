/**
 * @file        wlf_i18n.h
 * @brief       Internationalization (i18n) system for wlframe.
 * @details     This file provides a lightweight gettext replacement for C.
 *              Add multi-language support to your projects with ease.
 *              Based on the lv_i18n project architecture.
 * @author      wlframe team
 * @date        2024-12-17
 * @version     v1.0
 */

#ifndef TRANSLATOR_WLF_I18N_H
#define TRANSLATOR_WLF_I18N_H

#include <stdint.h>
#include <string.h>
#include <stdbool.h>

////////////////////////////////////////////////////////////////////////////////

/**
 * @brief Plural form types based on Unicode CLDR rules
 */
enum wlf_i18n_plural_type {
    WLF_I18N_PLURAL_TYPE_ZERO,   /**< Used for languages with zero form (e.g., Arabic) */
    WLF_I18N_PLURAL_TYPE_ONE,    /**< Singular form (e.g., 1 item) */
    WLF_I18N_PLURAL_TYPE_TWO,    /**< Dual form (e.g., 2 items in some languages) */
    WLF_I18N_PLURAL_TYPE_FEW,    /**< Few form (e.g., 2-4 items in Slavic languages) */
    WLF_I18N_PLURAL_TYPE_MANY,   /**< Many form (e.g., 5+ items in some languages) */
    WLF_I18N_PLURAL_TYPE_OTHER,  /**< Other/default form */
    _WLF_I18N_PLURAL_TYPE_NUM,   /**< Number of plural types (internal use) */
};

/**
 * @brief Language definition structure
 */
struct wlf_i18n_lang {
    const char * locale_name;                                      /**< Locale name (e.g., "en-US", "zh-CN") */
    const char * * singulars;                                      /**< Array of singular translations */
    const char * * plurals[_WLF_I18N_PLURAL_TYPE_NUM];            /**< Arrays of plural translations by type */
    uint8_t (*locale_plural_fn)(int32_t num);                     /**< Function to determine plural form */
};

#define WLF_I18N_ID_NOT_FOUND (-1)

// Null-terminated list of languages. First one used as default.
extern const struct wlf_i18n_lang * wlf_i18n_language_pack[];

/**
 * @brief Optimization mode selector
 * When WLF_I18N_OPTIMIZE is defined, compile-time string indexing is used for O(1) lookup.
 * Otherwise, runtime string comparison is used for O(n) lookup.
 */
#ifdef WLF_I18N_OPTIMIZE
// Optimized mode: compile-time string indexing (to be generated by compiler)
#define WLF_I18N_IDX_s(str) wlf_i18n_get_singular_idx_optimized(str)
#define WLF_I18N_IDX_p(str) wlf_i18n_get_plural_idx_optimized(str)
#else
// Standard mode: runtime string lookup
#define WLF_I18N_IDX_s(str) wlf_i18n_get_singular_id(str)
#define WLF_I18N_IDX_p(str) wlf_i18n_get_plural_id(str)
#endif

/**
 * @brief Get the translation from a message ID
 * @param msg_id message ID
 * @param msg_index the index of the msg_id
 * @return the translation of `msg_id` on the set locale
 */
const char * wlf_i18n_get_singular_by_idx(const char * msg_id, int msg_index);

/**
 * @brief Get the translation from a message ID and apply the language's plural rule to get correct form
 * @param msg_id message ID
 * @param msg_index the index of the msg_id
 * @param num an integer to select the correct plural form
 * @return the translation of `msg_id` on the set locale
 */
const char * wlf_i18n_get_plural_by_idx(const char * msg_id, int msg_index, int32_t num);

/**
 * @brief Convenient macros for translation
 * _(text) - get singular translation
 * _p(text, num) - get plural translation
 */
#define _(text) wlf_i18n_get_singular_by_idx(text, WLF_I18N_IDX_s(text))
#define _p(text, num) wlf_i18n_get_plural_by_idx(text, WLF_I18N_IDX_p(text), num)

// Alternative macro names
#define _t(text) _(text)
#define _tp(text, num) _p(text, num)

#ifndef WLF_I18N_OPTIMIZE
/**
 * @brief Runtime functions for string ID lookup (used in non-optimized mode)
 */
int wlf_i18n_get_singular_id(const char * phrase);
int wlf_i18n_get_plural_id(const char * phrase);
#endif

/**
 * @brief Set the languages for internationalization
 * @param langs pointer to the array of languages. (Last element has to be `NULL`)
 * @return 0 on success, -1 on failure
 */
int wlf_i18n_init(const struct wlf_i18n_lang * const * langs);

/**
 * @brief Sugar for simplified `wlf_i18n_init` call
 * @return 0 on success, -1 on failure
 */
int wlf_i18n_init_default(void);

/**
 * @brief Change the localization (language)
 * @param l_name name of the translation locale to use. E.g. "en-GB", "zh-CN"
 * @return 0 on success, -1 if locale not found
 */
int wlf_i18n_set_locale(const char * l_name);

/**
 * @brief Get the name of the currently used locale.
 * @return name of the currently used locale. E.g. "en-GB", or NULL if not initialized
 */
const char * wlf_i18n_get_current_locale(void);

/**
 * @brief Check if the i18n system is initialized
 * @return true if initialized, false otherwise
 */
bool wlf_i18n_is_initialized(void);

/**
 * @brief Get the number of available locales
 * @return number of available locales, 0 if not initialized
 */
int wlf_i18n_get_locale_count(void);

/**
 * @brief Get locale name by index
 * @param index locale index (0-based)
 * @return locale name or NULL if index is out of range
 */
const char * wlf_i18n_get_locale_by_index(int index);

/**
 * @brief Reset internal state. For testing and cleanup.
 */
void wlf_i18n_reset(void);

#endif // TRANSLATOR_WLF_I18N_H
